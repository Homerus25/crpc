name: Linux Build

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  release:
    types:
      - published

jobs:
  formatting:
    runs-on: [self-hosted, linux]
    steps:
      - uses: actions/checkout@v2

      - name: Format files
        run: find include src test -type f -a \( -name "*.cc" -o -name "*.h" \) -print0 | xargs -0 clang-format-9 -i

      - name: Check for differences
        run: |
          git status --porcelain
          git status --porcelain | xargs -I {} -0 test -z \"{}\"
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        config:
          - name: GCC 9 Release
            cxx: g++-9
            cc: gcc-9
            mode: Release
          - name: GCC 9 Debug
            cxx: g++-9
            cc: gcc-9
            mode: Debug
          - name: Clang 9 Release
            cxx: clang++-9
            cc: clang-9
            mode: Release
            cxxflags: -stdlib=libc++
            ldflags: -lc++abi
          - name: Clang Tidy
            cxx: clang++-9
            cc: clang-9
            mode: Debug
            cxxflags: -stdlib=libc++
            ldflags: -lc++abi
            lint: true
          - key: Clang 9 Sanitizer
            cxx: clang++-9
            cc: clang-9
            mode: Release
            cflags: -fsanitize=address,undefined -fno-omit-frame-pointer
            cxxflags: -fsanitize=address,undefined -fno-omit-frame-pointer -stdlib=libc++
            ldflags: -lc++abi
    env:
      BOOST_ROOT: /usr/local/share/boost/1.72.0
      UBSAN_OPTIONS: halt_on_error=1:abort_on_error=1
    steps:
      - uses: actions/checkout@v2
      - uses: seanmiddleditch/gha-setup-ninja@master

      # ==== INSTALL ====
      - name: Install LLVM
        if: matrix.config.cc == 'clang-9'
        env:
          DEBIAN_FRONTEND: noninteractive
        run: sudo apt-get install -y --no-install-recommends libc++-9-dev libc++abi-9-dev clang-tidy-9

      - name: Install Valgrind
        if: matrix.config.mode == 'Debug' && matrix.config.cc == 'gcc-9'
        env:
          DEBIAN_FRONTEND: noninteractive
        run: sudo apt-get install -y --no-install-recommends valgrind

      # ==== CACHING ====
      - name: Dependencies Cache
        uses: actions/cache@v1.1.2
        with:
          path: ${{ github.workspace }}/deps
          key: deps-${{ hashFiles('.pkg') }}
          restore-keys: deps-

      - name: libc++ Boost Cache
        uses: actions/cache@v1
        id: libcxxboostcache
        if: contains(matrix.config.cxxflags, 'libc++')
        with:
          path: boost_1_72_0
          key: boost_1_72_0

      # ==== BOOST FOR LIBCXX ====
      - name: Boost for libc++
        if: contains(matrix.config.cxxflags, 'libc++') && steps.libcxxboostcache.outputs.cache-hit != 'true'
        run: |
          echo "using clang : 9 : /usr/bin/clang++-9 ;" > $HOME/user-config.jam
          wget https://dl.bintray.com/boostorg/release/1.72.0/source/boost_1_72_0.tar.bz2
          tar xf boost_1_72_0.tar.bz2
          cd boost_1_72_0
          ./bootstrap.sh
          ./b2 -j6 \
            link=static threading=multi variant=release \
            toolset=clang-9 cxxflags="-stdlib=libc++" \
            --with-system \
            --with-thread
      - name: Set BOOST_ROOT
        if: contains(matrix.config.cxxflags, 'libc++')
        run: echo "::set-env name=BOOST_ROOT::`pwd`/boost_1_72_0"

      # ==== BUILD ====
      - name: CMake
        run: |
          cmake \
            -G Ninja -S . -B build \
            -DCMAKE_C_COMPILER=${{ matrix.config.cc }} \
            -DCMAKE_CXX_COMPILER=${{ matrix.config.cxx }} \
            -DCMAKE_C_FLAGS="${{ matrix.config.cflags }}" \
            -DCMAKE_CXX_FLAGS="${{ matrix.config.cxxflags }}" \
            -DCMAKE_CXX_FLAGS_DEBUG="" \
            -DCMAKE_CXX_LINKER_FLAGS=${{ matrix.config.ldflags }}" \
            -DCMAKE_CXX_EXE_LINKER_FLAGS="${{ matrix.config.ldflags }} \
            -DCMAKE_BUILD_TYPE=${{ matrix.config.mode }} \
            -DCRPC_LINT=${{ matrix.config.lint }} \
            -DCTX_ASAN=${{ contains(matrix.config.cxxflags, '-fsanitize=address') }} \
            -DCTX_VALGRIND=${{ matrix.config.cc == 'gcc-9' && matrix.config.mode == 'Debug' }}
      - name: Build
        run: cmake --build build --target crpc-test crpc-example-server crpc-example-client

      # ==== TESTS ====
      - name: Run Tests
        run: ./build/crpc-test

      # ==== VALGRIND ====
      - name: Run Tests Valgrind
        if: matrix.config.mode == 'Debug' && matrix.config.cc == 'gcc-9'
        run: valgrind --error-exitcode=1 --show-reachable=yes --leak-check=full ./build/crpc-test